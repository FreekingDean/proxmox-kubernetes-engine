// Code generated by protoc-gen-go-aip-cli. DO NOT EDIT.
package proxmox_kubernetes_enginev1

import (
	cobra "github.com/spf13/cobra"
	aipcli "go.einride.tech/aip-cli/aipcli"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewClusterServiceCommand(config aipcli.Config) *cobra.Command {
	return aipcli.NewServiceCommand(
		config,
		File_proxmox_kubernetes_engine_v1_clusters_proto.
			Services().ByName("ClusterService"),
		map[protoreflect.FullName]string{
			"proxmox_kubernetes_engine.v1.ClusterService": "",
		},
		aipcli.NewMethodCommand(
			config,
			File_proxmox_kubernetes_engine_v1_clusters_proto.
				Services().ByName("ClusterService").Methods().ByName("GetCluster"),
			&GetClusterRequest{},
			&Cluster{},
			map[protoreflect.FullName]string{
				"proxmox_kubernetes_engine.v1.ClusterService.GetCluster": "",
				"proxmox_kubernetes_engine.v1.GetClusterRequest.name":    "",
			},
		),
		aipcli.NewMethodCommand(
			config,
			File_proxmox_kubernetes_engine_v1_clusters_proto.
				Services().ByName("ClusterService").Methods().ByName("ListClusters"),
			&ListClustersRequest{},
			&ListClustersResponse{},
			map[protoreflect.FullName]string{
				"proxmox_kubernetes_engine.v1.ClusterService.ListClusters":    "",
				"proxmox_kubernetes_engine.v1.ListClustersRequest.page_size":  "",
				"proxmox_kubernetes_engine.v1.ListClustersRequest.page_token": "",
			},
		),
		aipcli.NewMethodCommand(
			config,
			File_proxmox_kubernetes_engine_v1_clusters_proto.
				Services().ByName("ClusterService").Methods().ByName("CreateCluster"),
			&CreateClusterRequest{},
			&Cluster{},
			map[protoreflect.FullName]string{
				"proxmox_kubernetes_engine.v1.Cluster.name":                    "",
				"proxmox_kubernetes_engine.v1.Cluster.version":                 "",
				"proxmox_kubernetes_engine.v1.ClusterService.CreateCluster":    "",
				"proxmox_kubernetes_engine.v1.CreateClusterRequest.cluster":    "",
				"proxmox_kubernetes_engine.v1.CreateClusterRequest.cluster_id": "",
			},
		),
		aipcli.NewMethodCommand(
			config,
			File_proxmox_kubernetes_engine_v1_clusters_proto.
				Services().ByName("ClusterService").Methods().ByName("UpdateCluster"),
			&UpdateClusterRequest{},
			&Cluster{},
			map[protoreflect.FullName]string{
				"google.protobuf.FieldMask.paths":                               " The set of field mask paths.\n",
				"proxmox_kubernetes_engine.v1.Cluster.name":                     "",
				"proxmox_kubernetes_engine.v1.Cluster.version":                  "",
				"proxmox_kubernetes_engine.v1.ClusterService.UpdateCluster":     "",
				"proxmox_kubernetes_engine.v1.UpdateClusterRequest.cluster":     "",
				"proxmox_kubernetes_engine.v1.UpdateClusterRequest.update_mask": "",
			},
		),
		aipcli.NewMethodCommand(
			config,
			File_proxmox_kubernetes_engine_v1_clusters_proto.
				Services().ByName("ClusterService").Methods().ByName("DeleteCluster"),
			&DeleteClusterRequest{},
			&emptypb.Empty{},
			map[protoreflect.FullName]string{
				"proxmox_kubernetes_engine.v1.ClusterService.DeleteCluster": "",
				"proxmox_kubernetes_engine.v1.DeleteClusterRequest.name":    "",
			},
		),
	)
}
