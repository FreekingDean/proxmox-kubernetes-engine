// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: proxmox_kubernetes_engine/v1/machine_pool_assignments.proto

package proxmox_kubernetes_enginev1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_ROLE_UNSPECIFIED    Role = 0
	Role_CONTROL             Role = 1
	Role_ETCD                Role = 2
	Role_WORKER              Role = 3
	Role_ETCD_CONTROL        Role = 4
	Role_ETCD_CONTROL_WORKER Role = 5
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "CONTROL",
		2: "ETCD",
		3: "WORKER",
		4: "ETCD_CONTROL",
		5: "ETCD_CONTROL_WORKER",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED":    0,
		"CONTROL":             1,
		"ETCD":                2,
		"WORKER":              3,
		"ETCD_CONTROL":        4,
		"ETCD_CONTROL_WORKER": 5,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{0}
}

type GetMachinePoolAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachinePoolAssignmentRequest) Reset() {
	*x = GetMachinePoolAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachinePoolAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachinePoolAssignmentRequest) ProtoMessage() {}

func (x *GetMachinePoolAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachinePoolAssignmentRequest.ProtoReflect.Descriptor instead.
func (*GetMachinePoolAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{0}
}

func (x *GetMachinePoolAssignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachinePoolAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent    string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListMachinePoolAssignmentsRequest) Reset() {
	*x = ListMachinePoolAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachinePoolAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinePoolAssignmentsRequest) ProtoMessage() {}

func (x *ListMachinePoolAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachinePoolAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ListMachinePoolAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{1}
}

func (x *ListMachinePoolAssignmentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListMachinePoolAssignmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachinePoolAssignmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListMachinePoolAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachinePoolAssignments []*MachinePoolAssignment `protobuf:"bytes,1,rep,name=machine_pool_assignments,json=machinePoolAssignments,proto3" json:"machine_pool_assignments,omitempty"`
	NextPageToken          string                   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachinePoolAssignmentsResponse) Reset() {
	*x = ListMachinePoolAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachinePoolAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinePoolAssignmentsResponse) ProtoMessage() {}

func (x *ListMachinePoolAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachinePoolAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*ListMachinePoolAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{2}
}

func (x *ListMachinePoolAssignmentsResponse) GetMachinePoolAssignments() []*MachinePoolAssignment {
	if x != nil {
		return x.MachinePoolAssignments
	}
	return nil
}

func (x *ListMachinePoolAssignmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateMachinePoolAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachinePoolAssignmentId string                 `protobuf:"bytes,1,opt,name=machine_pool_assignment_id,json=machinePoolAssignmentId,proto3" json:"machine_pool_assignment_id,omitempty"`
	Parent                  string                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	MachinePoolAssignment   *MachinePoolAssignment `protobuf:"bytes,3,opt,name=machine_pool_assignment,json=machinePoolAssignment,proto3" json:"machine_pool_assignment,omitempty"`
}

func (x *CreateMachinePoolAssignmentRequest) Reset() {
	*x = CreateMachinePoolAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMachinePoolAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMachinePoolAssignmentRequest) ProtoMessage() {}

func (x *CreateMachinePoolAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMachinePoolAssignmentRequest.ProtoReflect.Descriptor instead.
func (*CreateMachinePoolAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMachinePoolAssignmentRequest) GetMachinePoolAssignmentId() string {
	if x != nil {
		return x.MachinePoolAssignmentId
	}
	return ""
}

func (x *CreateMachinePoolAssignmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateMachinePoolAssignmentRequest) GetMachinePoolAssignment() *MachinePoolAssignment {
	if x != nil {
		return x.MachinePoolAssignment
	}
	return nil
}

type UpdateMachinePoolAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachinePoolAssignment *MachinePoolAssignment `protobuf:"bytes,1,opt,name=machine_pool_assignment,json=machinePoolAssignment,proto3" json:"machine_pool_assignment,omitempty"`
	UpdateMask            *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMachinePoolAssignmentRequest) Reset() {
	*x = UpdateMachinePoolAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachinePoolAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachinePoolAssignmentRequest) ProtoMessage() {}

func (x *UpdateMachinePoolAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachinePoolAssignmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateMachinePoolAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMachinePoolAssignmentRequest) GetMachinePoolAssignment() *MachinePoolAssignment {
	if x != nil {
		return x.MachinePoolAssignment
	}
	return nil
}

func (x *UpdateMachinePoolAssignmentRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteMachinePoolAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachinePoolAssignmentRequest) Reset() {
	*x = DeleteMachinePoolAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachinePoolAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachinePoolAssignmentRequest) ProtoMessage() {}

func (x *DeleteMachinePoolAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachinePoolAssignmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteMachinePoolAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteMachinePoolAssignmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MachinePoolAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MachinePool string `protobuf:"bytes,2,opt,name=machine_pool,json=machinePool,proto3" json:"machine_pool,omitempty"`
	Role        Role   `protobuf:"varint,3,opt,name=role,proto3,enum=proxmox_kubernetes_engine.v1.Role" json:"role,omitempty"`
	Count       int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MachinePoolAssignment) Reset() {
	*x = MachinePoolAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachinePoolAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachinePoolAssignment) ProtoMessage() {}

func (x *MachinePoolAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachinePoolAssignment.ProtoReflect.Descriptor instead.
func (*MachinePoolAssignment) Descriptor() ([]byte, []int) {
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP(), []int{6}
}

func (x *MachinePoolAssignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachinePoolAssignment) GetMachinePool() string {
	if x != nil {
		return x.MachinePool
	}
	return ""
}

func (x *MachinePoolAssignment) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *MachinePoolAssignment) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto protoreflect.FileDescriptor

var file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70,
	0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x0a, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x2d,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24,
	0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x16, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x9e, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1a, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x26, 0x0a, 0x24, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x70, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xd8, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x74, 0x0a, 0x22,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x0a, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f,
	0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x15, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41, 0x08, 0xfa,
	0x41, 0x34, 0x0a, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x69, 0x6f,
	0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x70, 0x72, 0x6f, 0x78,
	0x6d, 0x6f, 0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0xac, 0x01, 0xea, 0x41, 0xa8, 0x01,
	0x0a, 0x32, 0x70, 0x72, 0x6f, 0x78, 0x6f, 0x6d, 0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x2a, 0x16, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x32, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x6a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x54, 0x43, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x43,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x54, 0x43, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x10, 0x05, 0x32, 0xd6, 0x09, 0x0a, 0x1c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe0, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa2, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d,
	0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8b, 0x01, 0xda, 0x41, 0x39, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x49, 0x3a, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa4, 0x02,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0xda, 0x41, 0x23, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x61, 0x3a, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x46, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3d,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x42, 0xbc, 0x02,
	0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x1b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x72, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46, 0x72,
	0x65, 0x65, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x6d,
	0x6f, 0x78, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2d, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x70, 0x6b, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x78, 0x6d, 0x6f, 0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x78, 0x6d, 0x6f,
	0x78, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x1a, 0x50, 0x72,
	0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x50, 0x72, 0x6f, 0x78, 0x6d,
	0x6f, 0x78, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x26, 0x50, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1b, 0x50, 0x72, 0x6f, 0x78, 0x6d, 0x6f, 0x78, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescOnce sync.Once
	file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescData = file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDesc
)

func file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescGZIP() []byte {
	file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescOnce.Do(func() {
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescData = protoimpl.X.CompressGZIP(file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescData)
	})
	return file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDescData
}

var file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_goTypes = []interface{}{
	(Role)(0),                                  // 0: proxmox_kubernetes_engine.v1.Role
	(*GetMachinePoolAssignmentRequest)(nil),    // 1: proxmox_kubernetes_engine.v1.GetMachinePoolAssignmentRequest
	(*ListMachinePoolAssignmentsRequest)(nil),  // 2: proxmox_kubernetes_engine.v1.ListMachinePoolAssignmentsRequest
	(*ListMachinePoolAssignmentsResponse)(nil), // 3: proxmox_kubernetes_engine.v1.ListMachinePoolAssignmentsResponse
	(*CreateMachinePoolAssignmentRequest)(nil), // 4: proxmox_kubernetes_engine.v1.CreateMachinePoolAssignmentRequest
	(*UpdateMachinePoolAssignmentRequest)(nil), // 5: proxmox_kubernetes_engine.v1.UpdateMachinePoolAssignmentRequest
	(*DeleteMachinePoolAssignmentRequest)(nil), // 6: proxmox_kubernetes_engine.v1.DeleteMachinePoolAssignmentRequest
	(*MachinePoolAssignment)(nil),              // 7: proxmox_kubernetes_engine.v1.MachinePoolAssignment
	(*fieldmaskpb.FieldMask)(nil),              // 8: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                      // 9: google.protobuf.Empty
}
var file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_depIdxs = []int32{
	7,  // 0: proxmox_kubernetes_engine.v1.ListMachinePoolAssignmentsResponse.machine_pool_assignments:type_name -> proxmox_kubernetes_engine.v1.MachinePoolAssignment
	7,  // 1: proxmox_kubernetes_engine.v1.CreateMachinePoolAssignmentRequest.machine_pool_assignment:type_name -> proxmox_kubernetes_engine.v1.MachinePoolAssignment
	7,  // 2: proxmox_kubernetes_engine.v1.UpdateMachinePoolAssignmentRequest.machine_pool_assignment:type_name -> proxmox_kubernetes_engine.v1.MachinePoolAssignment
	8,  // 3: proxmox_kubernetes_engine.v1.UpdateMachinePoolAssignmentRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 4: proxmox_kubernetes_engine.v1.MachinePoolAssignment.role:type_name -> proxmox_kubernetes_engine.v1.Role
	1,  // 5: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.GetMachinePoolAssignment:input_type -> proxmox_kubernetes_engine.v1.GetMachinePoolAssignmentRequest
	2,  // 6: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.ListMachinePoolAssignments:input_type -> proxmox_kubernetes_engine.v1.ListMachinePoolAssignmentsRequest
	4,  // 7: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.CreateMachinePoolAssignment:input_type -> proxmox_kubernetes_engine.v1.CreateMachinePoolAssignmentRequest
	5,  // 8: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.UpdateMachinePoolAssignment:input_type -> proxmox_kubernetes_engine.v1.UpdateMachinePoolAssignmentRequest
	6,  // 9: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.DeleteMachinePoolAssignment:input_type -> proxmox_kubernetes_engine.v1.DeleteMachinePoolAssignmentRequest
	7,  // 10: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.GetMachinePoolAssignment:output_type -> proxmox_kubernetes_engine.v1.MachinePoolAssignment
	3,  // 11: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.ListMachinePoolAssignments:output_type -> proxmox_kubernetes_engine.v1.ListMachinePoolAssignmentsResponse
	7,  // 12: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.CreateMachinePoolAssignment:output_type -> proxmox_kubernetes_engine.v1.MachinePoolAssignment
	7,  // 13: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.UpdateMachinePoolAssignment:output_type -> proxmox_kubernetes_engine.v1.MachinePoolAssignment
	9,  // 14: proxmox_kubernetes_engine.v1.MachinePoolAssignmentService.DeleteMachinePoolAssignment:output_type -> google.protobuf.Empty
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_init() }
func file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_init() {
	if File_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachinePoolAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachinePoolAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachinePoolAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMachinePoolAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachinePoolAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachinePoolAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachinePoolAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_goTypes,
		DependencyIndexes: file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_depIdxs,
		EnumInfos:         file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_enumTypes,
		MessageInfos:      file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_msgTypes,
	}.Build()
	File_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto = out.File
	file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_rawDesc = nil
	file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_goTypes = nil
	file_proxmox_kubernetes_engine_v1_machine_pool_assignments_proto_depIdxs = nil
}
