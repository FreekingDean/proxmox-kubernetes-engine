// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: proxmox_kubernetes_engine/v1/machine_pool_assignments.proto

package v1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type MachinePoolAssignmentResourceName struct {
	Cluster               string
	MachinePoolAssignment string
}

func (n ClusterResourceName) MachinePoolAssignmentResourceName(
	machinePoolAssignment string,
) MachinePoolAssignmentResourceName {
	return MachinePoolAssignmentResourceName{
		Cluster:               n.Cluster,
		MachinePoolAssignment: machinePoolAssignment,
	}
}

func (n MachinePoolAssignmentResourceName) Validate() error {
	if n.Cluster == "" {
		return fmt.Errorf("cluster: empty")
	}
	if strings.IndexByte(n.Cluster, '/') != -1 {
		return fmt.Errorf("cluster: contains illegal character '/'")
	}
	if n.MachinePoolAssignment == "" {
		return fmt.Errorf("machine_pool_assignment: empty")
	}
	if strings.IndexByte(n.MachinePoolAssignment, '/') != -1 {
		return fmt.Errorf("machine_pool_assignment: contains illegal character '/'")
	}
	return nil
}

func (n MachinePoolAssignmentResourceName) ContainsWildcard() bool {
	return false || n.Cluster == "-" || n.MachinePoolAssignment == "-"
}

func (n MachinePoolAssignmentResourceName) String() string {
	return resourcename.Sprint(
		"clusters/{cluster}/machinePoolAssignments/{machine_pool_assignment}",
		n.Cluster,
		n.MachinePoolAssignment,
	)
}

func (n MachinePoolAssignmentResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *MachinePoolAssignmentResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"clusters/{cluster}/machinePoolAssignments/{machine_pool_assignment}",
		&n.Cluster,
		&n.MachinePoolAssignment,
	)
}

func (n MachinePoolAssignmentResourceName) ClusterResourceName() ClusterResourceName {
	return ClusterResourceName{
		Cluster: n.Cluster,
	}
}
