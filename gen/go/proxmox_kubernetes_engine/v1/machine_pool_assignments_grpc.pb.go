// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proxmox_kubernetes_engine/v1/machine_pool_assignments.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MachinePoolAssignmentService_GetMachinePoolAssignment_FullMethodName    = "/proxmox_kubernetes_engine.v1.MachinePoolAssignmentService/GetMachinePoolAssignment"
	MachinePoolAssignmentService_ListMachinePoolAssignments_FullMethodName  = "/proxmox_kubernetes_engine.v1.MachinePoolAssignmentService/ListMachinePoolAssignments"
	MachinePoolAssignmentService_CreateMachinePoolAssignment_FullMethodName = "/proxmox_kubernetes_engine.v1.MachinePoolAssignmentService/CreateMachinePoolAssignment"
	MachinePoolAssignmentService_UpdateMachinePoolAssignment_FullMethodName = "/proxmox_kubernetes_engine.v1.MachinePoolAssignmentService/UpdateMachinePoolAssignment"
	MachinePoolAssignmentService_DeleteMachinePoolAssignment_FullMethodName = "/proxmox_kubernetes_engine.v1.MachinePoolAssignmentService/DeleteMachinePoolAssignment"
)

// MachinePoolAssignmentServiceClient is the client API for MachinePoolAssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachinePoolAssignmentServiceClient interface {
	GetMachinePoolAssignment(ctx context.Context, in *GetMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*MachinePoolAssignment, error)
	ListMachinePoolAssignments(ctx context.Context, in *ListMachinePoolAssignmentsRequest, opts ...grpc.CallOption) (*ListMachinePoolAssignmentsResponse, error)
	CreateMachinePoolAssignment(ctx context.Context, in *CreateMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*MachinePoolAssignment, error)
	UpdateMachinePoolAssignment(ctx context.Context, in *UpdateMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*MachinePoolAssignment, error)
	DeleteMachinePoolAssignment(ctx context.Context, in *DeleteMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type machinePoolAssignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachinePoolAssignmentServiceClient(cc grpc.ClientConnInterface) MachinePoolAssignmentServiceClient {
	return &machinePoolAssignmentServiceClient{cc}
}

func (c *machinePoolAssignmentServiceClient) GetMachinePoolAssignment(ctx context.Context, in *GetMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*MachinePoolAssignment, error) {
	out := new(MachinePoolAssignment)
	err := c.cc.Invoke(ctx, MachinePoolAssignmentService_GetMachinePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolAssignmentServiceClient) ListMachinePoolAssignments(ctx context.Context, in *ListMachinePoolAssignmentsRequest, opts ...grpc.CallOption) (*ListMachinePoolAssignmentsResponse, error) {
	out := new(ListMachinePoolAssignmentsResponse)
	err := c.cc.Invoke(ctx, MachinePoolAssignmentService_ListMachinePoolAssignments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolAssignmentServiceClient) CreateMachinePoolAssignment(ctx context.Context, in *CreateMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*MachinePoolAssignment, error) {
	out := new(MachinePoolAssignment)
	err := c.cc.Invoke(ctx, MachinePoolAssignmentService_CreateMachinePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolAssignmentServiceClient) UpdateMachinePoolAssignment(ctx context.Context, in *UpdateMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*MachinePoolAssignment, error) {
	out := new(MachinePoolAssignment)
	err := c.cc.Invoke(ctx, MachinePoolAssignmentService_UpdateMachinePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolAssignmentServiceClient) DeleteMachinePoolAssignment(ctx context.Context, in *DeleteMachinePoolAssignmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MachinePoolAssignmentService_DeleteMachinePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachinePoolAssignmentServiceServer is the server API for MachinePoolAssignmentService service.
// All implementations must embed UnimplementedMachinePoolAssignmentServiceServer
// for forward compatibility
type MachinePoolAssignmentServiceServer interface {
	GetMachinePoolAssignment(context.Context, *GetMachinePoolAssignmentRequest) (*MachinePoolAssignment, error)
	ListMachinePoolAssignments(context.Context, *ListMachinePoolAssignmentsRequest) (*ListMachinePoolAssignmentsResponse, error)
	CreateMachinePoolAssignment(context.Context, *CreateMachinePoolAssignmentRequest) (*MachinePoolAssignment, error)
	UpdateMachinePoolAssignment(context.Context, *UpdateMachinePoolAssignmentRequest) (*MachinePoolAssignment, error)
	DeleteMachinePoolAssignment(context.Context, *DeleteMachinePoolAssignmentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMachinePoolAssignmentServiceServer()
}

// UnimplementedMachinePoolAssignmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMachinePoolAssignmentServiceServer struct {
}

func (UnimplementedMachinePoolAssignmentServiceServer) GetMachinePoolAssignment(context.Context, *GetMachinePoolAssignmentRequest) (*MachinePoolAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachinePoolAssignment not implemented")
}
func (UnimplementedMachinePoolAssignmentServiceServer) ListMachinePoolAssignments(context.Context, *ListMachinePoolAssignmentsRequest) (*ListMachinePoolAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachinePoolAssignments not implemented")
}
func (UnimplementedMachinePoolAssignmentServiceServer) CreateMachinePoolAssignment(context.Context, *CreateMachinePoolAssignmentRequest) (*MachinePoolAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachinePoolAssignment not implemented")
}
func (UnimplementedMachinePoolAssignmentServiceServer) UpdateMachinePoolAssignment(context.Context, *UpdateMachinePoolAssignmentRequest) (*MachinePoolAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachinePoolAssignment not implemented")
}
func (UnimplementedMachinePoolAssignmentServiceServer) DeleteMachinePoolAssignment(context.Context, *DeleteMachinePoolAssignmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachinePoolAssignment not implemented")
}
func (UnimplementedMachinePoolAssignmentServiceServer) mustEmbedUnimplementedMachinePoolAssignmentServiceServer() {
}

// UnsafeMachinePoolAssignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachinePoolAssignmentServiceServer will
// result in compilation errors.
type UnsafeMachinePoolAssignmentServiceServer interface {
	mustEmbedUnimplementedMachinePoolAssignmentServiceServer()
}

func RegisterMachinePoolAssignmentServiceServer(s grpc.ServiceRegistrar, srv MachinePoolAssignmentServiceServer) {
	s.RegisterService(&MachinePoolAssignmentService_ServiceDesc, srv)
}

func _MachinePoolAssignmentService_GetMachinePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachinePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolAssignmentServiceServer).GetMachinePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolAssignmentService_GetMachinePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolAssignmentServiceServer).GetMachinePoolAssignment(ctx, req.(*GetMachinePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolAssignmentService_ListMachinePoolAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinePoolAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolAssignmentServiceServer).ListMachinePoolAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolAssignmentService_ListMachinePoolAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolAssignmentServiceServer).ListMachinePoolAssignments(ctx, req.(*ListMachinePoolAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolAssignmentService_CreateMachinePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachinePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolAssignmentServiceServer).CreateMachinePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolAssignmentService_CreateMachinePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolAssignmentServiceServer).CreateMachinePoolAssignment(ctx, req.(*CreateMachinePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolAssignmentService_UpdateMachinePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachinePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolAssignmentServiceServer).UpdateMachinePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolAssignmentService_UpdateMachinePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolAssignmentServiceServer).UpdateMachinePoolAssignment(ctx, req.(*UpdateMachinePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolAssignmentService_DeleteMachinePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachinePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolAssignmentServiceServer).DeleteMachinePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolAssignmentService_DeleteMachinePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolAssignmentServiceServer).DeleteMachinePoolAssignment(ctx, req.(*DeleteMachinePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MachinePoolAssignmentService_ServiceDesc is the grpc.ServiceDesc for MachinePoolAssignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachinePoolAssignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxmox_kubernetes_engine.v1.MachinePoolAssignmentService",
	HandlerType: (*MachinePoolAssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachinePoolAssignment",
			Handler:    _MachinePoolAssignmentService_GetMachinePoolAssignment_Handler,
		},
		{
			MethodName: "ListMachinePoolAssignments",
			Handler:    _MachinePoolAssignmentService_ListMachinePoolAssignments_Handler,
		},
		{
			MethodName: "CreateMachinePoolAssignment",
			Handler:    _MachinePoolAssignmentService_CreateMachinePoolAssignment_Handler,
		},
		{
			MethodName: "UpdateMachinePoolAssignment",
			Handler:    _MachinePoolAssignmentService_UpdateMachinePoolAssignment_Handler,
		},
		{
			MethodName: "DeleteMachinePoolAssignment",
			Handler:    _MachinePoolAssignmentService_DeleteMachinePoolAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxmox_kubernetes_engine/v1/machine_pool_assignments.proto",
}
