// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proxmox_kubernetes_engine/v1/machine_pools.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MachinePoolService_GetMachinePool_FullMethodName    = "/proxmox_kubernetes_engine.v1.MachinePoolService/GetMachinePool"
	MachinePoolService_ListMachinePools_FullMethodName  = "/proxmox_kubernetes_engine.v1.MachinePoolService/ListMachinePools"
	MachinePoolService_CreateMachinePool_FullMethodName = "/proxmox_kubernetes_engine.v1.MachinePoolService/CreateMachinePool"
	MachinePoolService_UpdateMachinePool_FullMethodName = "/proxmox_kubernetes_engine.v1.MachinePoolService/UpdateMachinePool"
	MachinePoolService_DeleteMachinePool_FullMethodName = "/proxmox_kubernetes_engine.v1.MachinePoolService/DeleteMachinePool"
)

// MachinePoolServiceClient is the client API for MachinePoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachinePoolServiceClient interface {
	GetMachinePool(ctx context.Context, in *GetMachinePoolRequest, opts ...grpc.CallOption) (*MachinePool, error)
	ListMachinePools(ctx context.Context, in *ListMachinePoolsRequest, opts ...grpc.CallOption) (*ListMachinePoolsResponse, error)
	CreateMachinePool(ctx context.Context, in *CreateMachinePoolRequest, opts ...grpc.CallOption) (*MachinePool, error)
	UpdateMachinePool(ctx context.Context, in *UpdateMachinePoolRequest, opts ...grpc.CallOption) (*MachinePool, error)
	DeleteMachinePool(ctx context.Context, in *DeleteMachinePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type machinePoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachinePoolServiceClient(cc grpc.ClientConnInterface) MachinePoolServiceClient {
	return &machinePoolServiceClient{cc}
}

func (c *machinePoolServiceClient) GetMachinePool(ctx context.Context, in *GetMachinePoolRequest, opts ...grpc.CallOption) (*MachinePool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachinePool)
	err := c.cc.Invoke(ctx, MachinePoolService_GetMachinePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolServiceClient) ListMachinePools(ctx context.Context, in *ListMachinePoolsRequest, opts ...grpc.CallOption) (*ListMachinePoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachinePoolsResponse)
	err := c.cc.Invoke(ctx, MachinePoolService_ListMachinePools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolServiceClient) CreateMachinePool(ctx context.Context, in *CreateMachinePoolRequest, opts ...grpc.CallOption) (*MachinePool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachinePool)
	err := c.cc.Invoke(ctx, MachinePoolService_CreateMachinePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolServiceClient) UpdateMachinePool(ctx context.Context, in *UpdateMachinePoolRequest, opts ...grpc.CallOption) (*MachinePool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachinePool)
	err := c.cc.Invoke(ctx, MachinePoolService_UpdateMachinePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machinePoolServiceClient) DeleteMachinePool(ctx context.Context, in *DeleteMachinePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MachinePoolService_DeleteMachinePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachinePoolServiceServer is the server API for MachinePoolService service.
// All implementations must embed UnimplementedMachinePoolServiceServer
// for forward compatibility.
type MachinePoolServiceServer interface {
	GetMachinePool(context.Context, *GetMachinePoolRequest) (*MachinePool, error)
	ListMachinePools(context.Context, *ListMachinePoolsRequest) (*ListMachinePoolsResponse, error)
	CreateMachinePool(context.Context, *CreateMachinePoolRequest) (*MachinePool, error)
	UpdateMachinePool(context.Context, *UpdateMachinePoolRequest) (*MachinePool, error)
	DeleteMachinePool(context.Context, *DeleteMachinePoolRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMachinePoolServiceServer()
}

// UnimplementedMachinePoolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMachinePoolServiceServer struct{}

func (UnimplementedMachinePoolServiceServer) GetMachinePool(context.Context, *GetMachinePoolRequest) (*MachinePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachinePool not implemented")
}
func (UnimplementedMachinePoolServiceServer) ListMachinePools(context.Context, *ListMachinePoolsRequest) (*ListMachinePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachinePools not implemented")
}
func (UnimplementedMachinePoolServiceServer) CreateMachinePool(context.Context, *CreateMachinePoolRequest) (*MachinePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachinePool not implemented")
}
func (UnimplementedMachinePoolServiceServer) UpdateMachinePool(context.Context, *UpdateMachinePoolRequest) (*MachinePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachinePool not implemented")
}
func (UnimplementedMachinePoolServiceServer) DeleteMachinePool(context.Context, *DeleteMachinePoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachinePool not implemented")
}
func (UnimplementedMachinePoolServiceServer) mustEmbedUnimplementedMachinePoolServiceServer() {}
func (UnimplementedMachinePoolServiceServer) testEmbeddedByValue()                            {}

// UnsafeMachinePoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachinePoolServiceServer will
// result in compilation errors.
type UnsafeMachinePoolServiceServer interface {
	mustEmbedUnimplementedMachinePoolServiceServer()
}

func RegisterMachinePoolServiceServer(s grpc.ServiceRegistrar, srv MachinePoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedMachinePoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MachinePoolService_ServiceDesc, srv)
}

func _MachinePoolService_GetMachinePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachinePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolServiceServer).GetMachinePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolService_GetMachinePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolServiceServer).GetMachinePool(ctx, req.(*GetMachinePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolService_ListMachinePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolServiceServer).ListMachinePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolService_ListMachinePools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolServiceServer).ListMachinePools(ctx, req.(*ListMachinePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolService_CreateMachinePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachinePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolServiceServer).CreateMachinePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolService_CreateMachinePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolServiceServer).CreateMachinePool(ctx, req.(*CreateMachinePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolService_UpdateMachinePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachinePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolServiceServer).UpdateMachinePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolService_UpdateMachinePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolServiceServer).UpdateMachinePool(ctx, req.(*UpdateMachinePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachinePoolService_DeleteMachinePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachinePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachinePoolServiceServer).DeleteMachinePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachinePoolService_DeleteMachinePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachinePoolServiceServer).DeleteMachinePool(ctx, req.(*DeleteMachinePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MachinePoolService_ServiceDesc is the grpc.ServiceDesc for MachinePoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachinePoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxmox_kubernetes_engine.v1.MachinePoolService",
	HandlerType: (*MachinePoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachinePool",
			Handler:    _MachinePoolService_GetMachinePool_Handler,
		},
		{
			MethodName: "ListMachinePools",
			Handler:    _MachinePoolService_ListMachinePools_Handler,
		},
		{
			MethodName: "CreateMachinePool",
			Handler:    _MachinePoolService_CreateMachinePool_Handler,
		},
		{
			MethodName: "UpdateMachinePool",
			Handler:    _MachinePoolService_UpdateMachinePool_Handler,
		},
		{
			MethodName: "DeleteMachinePool",
			Handler:    _MachinePoolService_DeleteMachinePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxmox_kubernetes_engine/v1/machine_pools.proto",
}
