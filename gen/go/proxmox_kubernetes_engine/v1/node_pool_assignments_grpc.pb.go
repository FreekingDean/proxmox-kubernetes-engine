// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proxmox_kubernetes_engine/v1/node_pool_assignments.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodePoolAssignmentService_GetNodePoolAssignment_FullMethodName    = "/proxmox_kubernetes_engine.v1.NodePoolAssignmentService/GetNodePoolAssignment"
	NodePoolAssignmentService_ListNodePoolAssignments_FullMethodName  = "/proxmox_kubernetes_engine.v1.NodePoolAssignmentService/ListNodePoolAssignments"
	NodePoolAssignmentService_CreateNodePoolAssignment_FullMethodName = "/proxmox_kubernetes_engine.v1.NodePoolAssignmentService/CreateNodePoolAssignment"
	NodePoolAssignmentService_UpdateNodePoolAssignment_FullMethodName = "/proxmox_kubernetes_engine.v1.NodePoolAssignmentService/UpdateNodePoolAssignment"
	NodePoolAssignmentService_DeleteNodePoolAssignment_FullMethodName = "/proxmox_kubernetes_engine.v1.NodePoolAssignmentService/DeleteNodePoolAssignment"
)

// NodePoolAssignmentServiceClient is the client API for NodePoolAssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodePoolAssignmentServiceClient interface {
	GetNodePoolAssignment(ctx context.Context, in *GetNodePoolAssignmentRequest, opts ...grpc.CallOption) (*NodePoolAssignment, error)
	ListNodePoolAssignments(ctx context.Context, in *ListNodePoolAssignmentsRequest, opts ...grpc.CallOption) (*ListNodePoolAssignmentsResponse, error)
	CreateNodePoolAssignment(ctx context.Context, in *CreateNodePoolAssignmentRequest, opts ...grpc.CallOption) (*NodePoolAssignment, error)
	UpdateNodePoolAssignment(ctx context.Context, in *UpdateNodePoolAssignmentRequest, opts ...grpc.CallOption) (*NodePoolAssignment, error)
	DeleteNodePoolAssignment(ctx context.Context, in *DeleteNodePoolAssignmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nodePoolAssignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodePoolAssignmentServiceClient(cc grpc.ClientConnInterface) NodePoolAssignmentServiceClient {
	return &nodePoolAssignmentServiceClient{cc}
}

func (c *nodePoolAssignmentServiceClient) GetNodePoolAssignment(ctx context.Context, in *GetNodePoolAssignmentRequest, opts ...grpc.CallOption) (*NodePoolAssignment, error) {
	out := new(NodePoolAssignment)
	err := c.cc.Invoke(ctx, NodePoolAssignmentService_GetNodePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolAssignmentServiceClient) ListNodePoolAssignments(ctx context.Context, in *ListNodePoolAssignmentsRequest, opts ...grpc.CallOption) (*ListNodePoolAssignmentsResponse, error) {
	out := new(ListNodePoolAssignmentsResponse)
	err := c.cc.Invoke(ctx, NodePoolAssignmentService_ListNodePoolAssignments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolAssignmentServiceClient) CreateNodePoolAssignment(ctx context.Context, in *CreateNodePoolAssignmentRequest, opts ...grpc.CallOption) (*NodePoolAssignment, error) {
	out := new(NodePoolAssignment)
	err := c.cc.Invoke(ctx, NodePoolAssignmentService_CreateNodePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolAssignmentServiceClient) UpdateNodePoolAssignment(ctx context.Context, in *UpdateNodePoolAssignmentRequest, opts ...grpc.CallOption) (*NodePoolAssignment, error) {
	out := new(NodePoolAssignment)
	err := c.cc.Invoke(ctx, NodePoolAssignmentService_UpdateNodePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolAssignmentServiceClient) DeleteNodePoolAssignment(ctx context.Context, in *DeleteNodePoolAssignmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodePoolAssignmentService_DeleteNodePoolAssignment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodePoolAssignmentServiceServer is the server API for NodePoolAssignmentService service.
// All implementations must embed UnimplementedNodePoolAssignmentServiceServer
// for forward compatibility
type NodePoolAssignmentServiceServer interface {
	GetNodePoolAssignment(context.Context, *GetNodePoolAssignmentRequest) (*NodePoolAssignment, error)
	ListNodePoolAssignments(context.Context, *ListNodePoolAssignmentsRequest) (*ListNodePoolAssignmentsResponse, error)
	CreateNodePoolAssignment(context.Context, *CreateNodePoolAssignmentRequest) (*NodePoolAssignment, error)
	UpdateNodePoolAssignment(context.Context, *UpdateNodePoolAssignmentRequest) (*NodePoolAssignment, error)
	DeleteNodePoolAssignment(context.Context, *DeleteNodePoolAssignmentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNodePoolAssignmentServiceServer()
}

// UnimplementedNodePoolAssignmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodePoolAssignmentServiceServer struct {
}

func (UnimplementedNodePoolAssignmentServiceServer) GetNodePoolAssignment(context.Context, *GetNodePoolAssignmentRequest) (*NodePoolAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodePoolAssignment not implemented")
}
func (UnimplementedNodePoolAssignmentServiceServer) ListNodePoolAssignments(context.Context, *ListNodePoolAssignmentsRequest) (*ListNodePoolAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodePoolAssignments not implemented")
}
func (UnimplementedNodePoolAssignmentServiceServer) CreateNodePoolAssignment(context.Context, *CreateNodePoolAssignmentRequest) (*NodePoolAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodePoolAssignment not implemented")
}
func (UnimplementedNodePoolAssignmentServiceServer) UpdateNodePoolAssignment(context.Context, *UpdateNodePoolAssignmentRequest) (*NodePoolAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodePoolAssignment not implemented")
}
func (UnimplementedNodePoolAssignmentServiceServer) DeleteNodePoolAssignment(context.Context, *DeleteNodePoolAssignmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodePoolAssignment not implemented")
}
func (UnimplementedNodePoolAssignmentServiceServer) mustEmbedUnimplementedNodePoolAssignmentServiceServer() {
}

// UnsafeNodePoolAssignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodePoolAssignmentServiceServer will
// result in compilation errors.
type UnsafeNodePoolAssignmentServiceServer interface {
	mustEmbedUnimplementedNodePoolAssignmentServiceServer()
}

func RegisterNodePoolAssignmentServiceServer(s grpc.ServiceRegistrar, srv NodePoolAssignmentServiceServer) {
	s.RegisterService(&NodePoolAssignmentService_ServiceDesc, srv)
}

func _NodePoolAssignmentService_GetNodePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolAssignmentServiceServer).GetNodePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolAssignmentService_GetNodePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolAssignmentServiceServer).GetNodePoolAssignment(ctx, req.(*GetNodePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolAssignmentService_ListNodePoolAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodePoolAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolAssignmentServiceServer).ListNodePoolAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolAssignmentService_ListNodePoolAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolAssignmentServiceServer).ListNodePoolAssignments(ctx, req.(*ListNodePoolAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolAssignmentService_CreateNodePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolAssignmentServiceServer).CreateNodePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolAssignmentService_CreateNodePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolAssignmentServiceServer).CreateNodePoolAssignment(ctx, req.(*CreateNodePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolAssignmentService_UpdateNodePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolAssignmentServiceServer).UpdateNodePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolAssignmentService_UpdateNodePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolAssignmentServiceServer).UpdateNodePoolAssignment(ctx, req.(*UpdateNodePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolAssignmentService_DeleteNodePoolAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodePoolAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolAssignmentServiceServer).DeleteNodePoolAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolAssignmentService_DeleteNodePoolAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolAssignmentServiceServer).DeleteNodePoolAssignment(ctx, req.(*DeleteNodePoolAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodePoolAssignmentService_ServiceDesc is the grpc.ServiceDesc for NodePoolAssignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodePoolAssignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxmox_kubernetes_engine.v1.NodePoolAssignmentService",
	HandlerType: (*NodePoolAssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodePoolAssignment",
			Handler:    _NodePoolAssignmentService_GetNodePoolAssignment_Handler,
		},
		{
			MethodName: "ListNodePoolAssignments",
			Handler:    _NodePoolAssignmentService_ListNodePoolAssignments_Handler,
		},
		{
			MethodName: "CreateNodePoolAssignment",
			Handler:    _NodePoolAssignmentService_CreateNodePoolAssignment_Handler,
		},
		{
			MethodName: "UpdateNodePoolAssignment",
			Handler:    _NodePoolAssignmentService_UpdateNodePoolAssignment_Handler,
		},
		{
			MethodName: "DeleteNodePoolAssignment",
			Handler:    _NodePoolAssignmentService_DeleteNodePoolAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxmox_kubernetes_engine/v1/node_pool_assignments.proto",
}
