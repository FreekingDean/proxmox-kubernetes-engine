// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proxmox_kubernetes_engine/v1/node_pools.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodePoolService_GetNodePool_FullMethodName    = "/proxmox_kubernetes_engine.v1.NodePoolService/GetNodePool"
	NodePoolService_ListNodePools_FullMethodName  = "/proxmox_kubernetes_engine.v1.NodePoolService/ListNodePools"
	NodePoolService_CreateNodePool_FullMethodName = "/proxmox_kubernetes_engine.v1.NodePoolService/CreateNodePool"
	NodePoolService_UpdateNodePool_FullMethodName = "/proxmox_kubernetes_engine.v1.NodePoolService/UpdateNodePool"
	NodePoolService_DeleteNodePool_FullMethodName = "/proxmox_kubernetes_engine.v1.NodePoolService/DeleteNodePool"
)

// NodePoolServiceClient is the client API for NodePoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodePoolServiceClient interface {
	GetNodePool(ctx context.Context, in *GetNodePoolRequest, opts ...grpc.CallOption) (*NodePool, error)
	ListNodePools(ctx context.Context, in *ListNodePoolsRequest, opts ...grpc.CallOption) (*ListNodePoolsResponse, error)
	CreateNodePool(ctx context.Context, in *CreateNodePoolRequest, opts ...grpc.CallOption) (*NodePool, error)
	UpdateNodePool(ctx context.Context, in *UpdateNodePoolRequest, opts ...grpc.CallOption) (*NodePool, error)
	DeleteNodePool(ctx context.Context, in *DeleteNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nodePoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodePoolServiceClient(cc grpc.ClientConnInterface) NodePoolServiceClient {
	return &nodePoolServiceClient{cc}
}

func (c *nodePoolServiceClient) GetNodePool(ctx context.Context, in *GetNodePoolRequest, opts ...grpc.CallOption) (*NodePool, error) {
	out := new(NodePool)
	err := c.cc.Invoke(ctx, NodePoolService_GetNodePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolServiceClient) ListNodePools(ctx context.Context, in *ListNodePoolsRequest, opts ...grpc.CallOption) (*ListNodePoolsResponse, error) {
	out := new(ListNodePoolsResponse)
	err := c.cc.Invoke(ctx, NodePoolService_ListNodePools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolServiceClient) CreateNodePool(ctx context.Context, in *CreateNodePoolRequest, opts ...grpc.CallOption) (*NodePool, error) {
	out := new(NodePool)
	err := c.cc.Invoke(ctx, NodePoolService_CreateNodePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolServiceClient) UpdateNodePool(ctx context.Context, in *UpdateNodePoolRequest, opts ...grpc.CallOption) (*NodePool, error) {
	out := new(NodePool)
	err := c.cc.Invoke(ctx, NodePoolService_UpdateNodePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePoolServiceClient) DeleteNodePool(ctx context.Context, in *DeleteNodePoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodePoolService_DeleteNodePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodePoolServiceServer is the server API for NodePoolService service.
// All implementations must embed UnimplementedNodePoolServiceServer
// for forward compatibility
type NodePoolServiceServer interface {
	GetNodePool(context.Context, *GetNodePoolRequest) (*NodePool, error)
	ListNodePools(context.Context, *ListNodePoolsRequest) (*ListNodePoolsResponse, error)
	CreateNodePool(context.Context, *CreateNodePoolRequest) (*NodePool, error)
	UpdateNodePool(context.Context, *UpdateNodePoolRequest) (*NodePool, error)
	DeleteNodePool(context.Context, *DeleteNodePoolRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNodePoolServiceServer()
}

// UnimplementedNodePoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodePoolServiceServer struct {
}

func (UnimplementedNodePoolServiceServer) GetNodePool(context.Context, *GetNodePoolRequest) (*NodePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodePool not implemented")
}
func (UnimplementedNodePoolServiceServer) ListNodePools(context.Context, *ListNodePoolsRequest) (*ListNodePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodePools not implemented")
}
func (UnimplementedNodePoolServiceServer) CreateNodePool(context.Context, *CreateNodePoolRequest) (*NodePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodePool not implemented")
}
func (UnimplementedNodePoolServiceServer) UpdateNodePool(context.Context, *UpdateNodePoolRequest) (*NodePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodePool not implemented")
}
func (UnimplementedNodePoolServiceServer) DeleteNodePool(context.Context, *DeleteNodePoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodePool not implemented")
}
func (UnimplementedNodePoolServiceServer) mustEmbedUnimplementedNodePoolServiceServer() {}

// UnsafeNodePoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodePoolServiceServer will
// result in compilation errors.
type UnsafeNodePoolServiceServer interface {
	mustEmbedUnimplementedNodePoolServiceServer()
}

func RegisterNodePoolServiceServer(s grpc.ServiceRegistrar, srv NodePoolServiceServer) {
	s.RegisterService(&NodePoolService_ServiceDesc, srv)
}

func _NodePoolService_GetNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolServiceServer).GetNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolService_GetNodePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolServiceServer).GetNodePool(ctx, req.(*GetNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolService_ListNodePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolServiceServer).ListNodePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolService_ListNodePools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolServiceServer).ListNodePools(ctx, req.(*ListNodePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolService_CreateNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolServiceServer).CreateNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolService_CreateNodePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolServiceServer).CreateNodePool(ctx, req.(*CreateNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolService_UpdateNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolServiceServer).UpdateNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolService_UpdateNodePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolServiceServer).UpdateNodePool(ctx, req.(*UpdateNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePoolService_DeleteNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePoolServiceServer).DeleteNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePoolService_DeleteNodePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePoolServiceServer).DeleteNodePool(ctx, req.(*DeleteNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodePoolService_ServiceDesc is the grpc.ServiceDesc for NodePoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodePoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxmox_kubernetes_engine.v1.NodePoolService",
	HandlerType: (*NodePoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodePool",
			Handler:    _NodePoolService_GetNodePool_Handler,
		},
		{
			MethodName: "ListNodePools",
			Handler:    _NodePoolService_ListNodePools_Handler,
		},
		{
			MethodName: "CreateNodePool",
			Handler:    _NodePoolService_CreateNodePool_Handler,
		},
		{
			MethodName: "UpdateNodePool",
			Handler:    _NodePoolService_UpdateNodePool_Handler,
		},
		{
			MethodName: "DeleteNodePool",
			Handler:    _NodePoolService_DeleteNodePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxmox_kubernetes_engine/v1/node_pools.proto",
}
