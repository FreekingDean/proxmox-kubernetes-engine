syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

package proxmox_kubernetes_engine.v1;

option java_multiple_files = true;
option java_package = "com.proxmox_kubernetes_engine.v1";
option java_outer_classname = "NodePoolsProto";
option go_package = "github.com/FreekingDean/proxmox-kubernetes-engine/gen/go/proxmox_kubernetes_engine/v1";

service NodePoolService {
    rpc GetNodePool(GetNodePoolRequest) returns (NodePool) {
    option (google.api.http) = {
      get: "/v1/{name=nodePools/*}"
    };
    option (google.api.method_signature) = "name";
  }
    rpc ListNodePools(ListNodePoolsRequest) returns (ListNodePoolsResponse) {
    option (google.api.http) = {
      get: "/v1/nodePools"
    };
  }
    rpc CreateNodePool(CreateNodePoolRequest) returns(NodePool) {
    option (google.api.http) = {
      post: "/v1/nodePools"
      body: "node_pool"
    };
    option (google.api.method_signature) = "node_pool,node_pool_id";
  }
    rpc UpdateNodePool(UpdateNodePoolRequest) returns(NodePool) {
    option (google.api.http) = {
      patch: "/v1/{node_pool.name=nodePools/*}"
      body: "node_pool"
    };
    option (google.api.method_signature) = "node_pool,update_mask";
  }
    rpc DeleteNodePool(DeleteNodePoolRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=nodePools/*}"
    };
    option (google.api.method_signature) = "name";
  }
}

message GetNodePoolRequest {
  string name = 1 [
  (google.api.field_behavior) = REQUIRED,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/NodePool"
  }];
}

message ListNodePoolsRequest {
  int32 page_size = 1 [ (google.api.field_behavior) = OPTIONAL ];
  string page_token = 2 [ (google.api.field_behavior) = OPTIONAL ];
}

message ListNodePoolsResponse {
  repeated NodePool node_pools = 1;
  string next_page_token = 2;
}

message CreateNodePoolRequest {
  string node_pool_id = 1 [ (google.api.field_behavior) = REQUIRED ];
  NodePool node_pool = 2 [ (google.api.field_behavior) = REQUIRED ];
}

message UpdateNodePoolRequest {
  NodePool node_pool = 1 [ (google.api.field_behavior) = REQUIRED ];
  google.protobuf.FieldMask update_mask = 2 [ (google.api.field_behavior) = REQUIRED ];
}

message DeleteNodePoolRequest {
  string name = 1 [
  (google.api.field_behavior) = REQUIRED,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/NodePool"
  }];
}

message NodePool {
  option (google.api.resource) = {
    type: "proxomx-kubernetes-engine.io/NodePool"
    pattern: "nodePools/{node_pool}"
    singular: "nodePool"
    plural: "nodePools"
  };
  string name = 1 [
  (google.api.field_behavior) = IDENTIFIER,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/NodePool"
  }];
  string image = 2 [ (google.api.field_behavior) = REQUIRED ];
  int32 memory = 3 [ (google.api.field_behavior) = REQUIRED ];
  int32 cpus = 4 [ (google.api.field_behavior) = REQUIRED ];

  repeated string machines = 5 [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

