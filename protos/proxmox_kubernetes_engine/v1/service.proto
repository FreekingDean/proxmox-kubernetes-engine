syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";

package proxmox_kubernetes_engine.v1;

option java_multiple_files = true;
option java_package = "com.proxmox_kubernetes_engine.v1";
option java_outer_classname = "ServiceProto";
option go_package = "github.com/FreekingDean/proxmox-kubernetes-engine/gen/go/proxmox_kubernetes_engine/v1";

// ClusterService is a service to service clusters
service ClusterService {
  // Retreive cluster
  rpc GetCluster(GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      get: "/v1/{name=clusters/*}"
    };
    option (google.api.method_signature) = "name";
  }
  // List all clusters
  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/v1/clusters"
    };
  }
  // Create a cluster
  rpc CreateCluster(CreateClusterRequest) returns(Cluster) {
    option (google.api.http) = {
      post: "/v1/clusters"
      body: "cluster"
    };
    option (google.api.method_signature) = "cluster,cluster_id";
  }
  // Update the cluster
  rpc UpdateCluster(UpdateClusterRequest) returns(Cluster) {
    option (google.api.http) = {
      patch: "/v1/{cluster.name=clusters/*}"
      body: "cluster"
    };
    option (google.api.method_signature) = "cluster,update_mask";
  }
  // Delete said cluster
  rpc DeleteCluster(DeleteClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=clusters/*}"
    };
    option (google.api.method_signature) = "name";
  }
}

// GetClusterRequest is the request to get a cluster
message GetClusterRequest {
  string name = 1 [
  (google.api.field_behavior) = REQUIRED,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/Cluster"
  }];
}

// ListClustersRequest is the request to list clusters
message ListClustersRequest {
  int32 page_size = 1 [ (google.api.field_behavior) = OPTIONAL ];
  string page_token = 2 [ (google.api.field_behavior) = OPTIONAL ];
}

// ListClustersResponse is the response from listing clusters
message ListClustersResponse {
  repeated Cluster clusters = 1;
  string next_page_token = 2;
}

// CreateClusterRequest requests the creating of clusters
message CreateClusterRequest {
  string cluster_id = 1 [ (google.api.field_behavior) = REQUIRED ];
  Cluster cluster = 2 [ (google.api.field_behavior) = REQUIRED ];
}

// UpdateClusterRequest updates the cluster
message UpdateClusterRequest {
  Cluster cluster = 1 [ (google.api.field_behavior) = REQUIRED ];
  google.protobuf.FieldMask update_mask = 2 [ (google.api.field_behavior) = REQUIRED ];
}

// DeleteClusterRequest deletes the cluster
message DeleteClusterRequest {
  string name = 1 [
  (google.api.field_behavior) = REQUIRED,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/Cluster"
  }];
}

// Cluster is a cluster
message Cluster {
  option (google.api.resource) = {
    type: "proxomx-kubernetes-engine.io/Cluster"
    pattern: "clusters/{cluster}"
    singular: "cluster"
    plural: "clusters"
  };
  string name = 1 [
  (google.api.field_behavior) = IDENTIFIER,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/Cluster"
  }];
  string version = 2 [ (google.api.field_behavior) = REQUIRED ];
}

// NodePoolAssignment is a joins table
message NodePoolAssignment {
  option (google.api.resource) = {
    type: "proxomx-kubernetes-engine.io/NodePoolAssignment"
    pattern: "nodePoolAssignments/{node_pool_assignment}"
    singular: "nodePoolAssignment"
    plural: "nodePoolAssignments"
  };
  string name = 1 [
  (google.api.field_behavior) = IDENTIFIER,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/NodePoolAssignment"
  }];
  string nodepool = 2 [ (google.api.field_behavior) = REQUIRED ];
  string cluster = 3 [ (google.api.field_behavior) = REQUIRED ];
  string role = 4 [ (google.api.field_behavior) = REQUIRED ];
}

// NodePool is better named machinepool
message NodePool {
  option (google.api.resource) = {
    type: "proxomx-kubernetes-engine.io/NodePool"
    pattern: "nodePools/{node_pool}"
    singular: "nodePool"
    plural: "nodePools"
  };
  string name = 1 [
  (google.api.field_behavior) = IDENTIFIER,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/NodePool"
  }];
  string image = 2 [ (google.api.field_behavior) = REQUIRED ];
  int32 memory = 3 [ (google.api.field_behavior) = REQUIRED ];
  int32 cpus = 4 [ (google.api.field_behavior) = REQUIRED ];

  repeated string machines = 5;
}

// Machine is a provisioned machine
message Machine {
  option (google.api.resource) = {
    type: "proxomx-kubernetes-engine.io/Machine"
    pattern: "machines/{machine}"
    singular: "machine"
    plural: "machines"
  };
  string name = 1 [ 
  (google.api.field_behavior) = IDENTIFIER,
  (google.api.resource_reference) = {
    type: "proxmox-kubernetes-engine.io/Machine"
  }];
  string image = 2 [ (google.api.field_behavior) = REQUIRED ];
  int32 memory = 3 [ (google.api.field_behavior) = REQUIRED ];
  int32 cpus = 4 [ (google.api.field_behavior) = REQUIRED ];
  State state = 5 [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

// State shows the state of a machine
enum State {
  UNKNOWN = 0;
  STARTING = 1;
  RUNNING = 2;
  STOPPING = 3;
  STOPPED = 4;
  ERROR = 5;
}
